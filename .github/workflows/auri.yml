name: auri

on: [push]

# unfortunately there is no way to reuse job init steps :-(
# https://stackoverflow.com/questions/65242830/in-a-github-actions-workflow-is-there-a-way-to-have-multiple-jobs-reuse-the-sam
# https://github.community/t/github-actions-configure-defaults-option/18438

jobs:
  linting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.16' ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}

      - name: setup environment
        run: |
          go install github.com/mgechev/revive@latest
      - name: linting
        run: revive -config revive.toml -formatter stylish $(go list ./... | grep -v /vendor/)

  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.16' ]
        gobuffalo: [ '0.16.23' ]
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: auri_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}

      - name: setup environment
        run: |
          go install github.com/gobuffalo/buffalo/buffalo@v${{ matrix.gobuffalo }}
      - name: run unit tests
        run: |
           cp fixtures/testing-config.env .env
           make test

  build-binary:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: [ '1.16' ]
        node: [ '14' ]
        gobuffalo: [ '0.16.23' ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node }}-yarn-

      - name: setup environment
        run: |
          go install github.com/gobuffalo/buffalo/buffalo@v${{ matrix.gobuffalo }}
      - name: build the binary
        run: |
          yarn install
          make build
      - uses: actions/upload-artifact@v2
        with:
          name: auri-binary
          path: bin/auri

  get-version:
    runs-on: ubuntu-latest
    outputs:
      nightly_version: ${{ steps.nightly_version.outputs.version }}
      nightly_release: ${{ steps.nightly_release.outputs.release }}
    steps:
      - name: determine last minor.major version
        id: determine_last_version
        run: |
          echo "::set-output name=version::0.0"
      - name: build nightly version
        id: nightly_version
        run: |
          echo "::set-output name=version::${{ steps.determine_last_version.outputs.version }}.9999"
      - name: build nightly release
        id: nightly_release
        run: |
          echo "::set-output name=release::$GITHUB_RUN_NUMBER"


  build-rpm:
    runs-on: ubuntu-latest
    needs:
     - get-version
     - build-binary
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: auri-binary
          path: bin/
      - name: setup environment
        run: |
          mkdir -p rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}
      - name: prepare rpm sources
        run: |
          cp bin/auri  rpm/assets/
          cd rpm/assets/
          tar cfz ../../rpmbuild/SOURCES/auri.tgz *
      - name: set proper version numbers
        run: |
          sed -i 's/Version:.*/Version:        ${{ needs.get-version.outputs.nightly_version }}/' rpm/auri.spec
          sed -i 's/Release:.*/Release:        ${{ needs.get-version.outputs.nightly_release }}/' rpm/auri.spec
      - name: build rpm
        run: |
          rpmbuild -ba rpm/auri.spec --define "_topdir $PWD/rpmbuild"
      - uses: actions/upload-artifact@v2
        with:
          name: auri.src.rpm
          path: rpmbuild/SRPMS/*.rpm
      - uses: actions/upload-artifact@v2
        with:
          name: auri.rpm
          path: rpmbuild/RPMS/x86_64/*.rpm

  upload-nightly-rpm:
    if: ${{ github.repository == 'auri/auri' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build-rpm
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: auri.src.rpm
      - name: setup environment
        run: pip install copr-cli
      - name: prepare copr token
        run: |
          mkdir -p ~/.config/
          cat > ~/.config/copr <<EOF
          [copr-cli]
          login = ${{ secrets.COPR_LOGIN }}
          username = ${{ secrets.COPR_USERNAME }}
          token = ${{ secrets.COPR_TOKEN }}
          copr_url = https://copr.fedorainfracloud.org
          EOF
      - name: upload source rpm
        run: copr-cli build --nowait auri/nightly *.src.rpm
